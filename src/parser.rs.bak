use crate::lexer::{TokenType, Token};


/*
#[derive(Debug, Clone)]
pub enum AstNode {
    Literal {
        token: Token,
    },
    ExprBinaryOp {
        left:     Box<AstNode>,
        operator: Token,
        right:    Box<AstNode>,
    },

}

// impl AstNode {
//     pub fn interpret_thyself(&self) -> () {
//         match self {
//             Self::Literal { token } => self.eval_literal(),
//             Self::ExprBinaryOp { left, operator, right } => {}
//         }
//     }
//     fn eval_literal(value: Self::Literal) -> () {
//     }
// }
*/


// /*
pub trait Evaluatable {
    fn eval(&self) -> ();
}

struct Literal {
    token: Token,
}

struct ExprBinaryOp {
    left:     Box<AstNode>,
    operator: Token,
    right:    Box<AstNode>,
}

impl Evaluatable for ExprBinaryOp {
    fn eval(&self) -> () {
        match self.operator.kind {
            TokenType::Plus => self.left.eval() + self.right.eval(),
            _ => {}
        }
    }
}

enum AstNodeType {
    Literal,
    ExprBinaryOp,
}

struct AstNode<'a> {
    tag: AstNodeType,
    node: &'a dyn Evaluatable,
}

// struct AstNode<T: Evaluatable> {
//     node: T,
// }



// */






#[derive(Debug)]
pub struct Parser {
    tokenlist: Vec<Token>,
    position: usize,
}



impl Parser {
    pub fn new(tokenlist: Vec<Token>) -> Self {
        Self {
            tokenlist,
            position: 0usize,
        }
    }

    pub fn parse(&mut self) -> Box<AstNode> {
        self.prod_term()
    }

    fn get_current_token(&self) -> &Token {
        &self.tokenlist[self.position]
    }




    fn prod_primary(&mut self) -> Box<AstNode> {

        let new = Box::new(AstNode::Literal{ token: self.get_current_token().clone() });
        self.position += 1;
        new

    }

    fn prod_term(&mut self) -> Box<AstNode> {
        // term -> primary ( ( "-" | "+" ) primary )*

        let mut expr: Box<AstNode> = self.prod_primary();

        while let
        TokenType::Plus | TokenType::Minus = self.get_current_token().kind {
            let operator: Token = self.get_current_token().clone();
            // self.position turns into slice reference in self.get_current_token() and therefore
            // cannot be reassigned (unless cloned)
            self.position += 1;
            let rhs = self.prod_primary();

            expr = Box::new(AstNode::ExprBinaryOp{
                left: expr,
                operator,
                right: rhs,
            });
        }

        expr

    }






}
